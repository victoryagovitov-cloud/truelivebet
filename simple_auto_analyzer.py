#!/usr/bin/env python3
"""
TrueLiveBet - –ü—Ä–æ—Å—Ç–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –º–∞—Ç—á–µ–π
–†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –º–æ–¥—É–ª—è–º–∏ Python
"""

import json
import time
import logging
import urllib.request
import urllib.parse
from datetime import datetime
import os
import re

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_CONFIG = {
    'bot_token': '7824400107:AAGZqPdS0E0N3HsYpD8TW9m8c-bapFd-RHk',
    'chat_id': '678873745',
    'bot_username': 'TrueLiveBetBot'
}

PARSING_CONFIG = {
    'interval_minutes': 30,
    'betboom_url': 'https://betboom.ru',
    'max_matches_per_check': 10,
    'timeout_seconds': 30
}

ANALYSIS_CRITERIA = {
    'football': {
        'min_goal_difference': 2,
        'min_time_elapsed': 60,
        'confidence_threshold': 75
    },
    'basketball': {
        'min_point_difference': 15,
        'confidence_threshold': 70
    }
}

def send_telegram_message(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_CONFIG['bot_token']}/sendMessage"
        
        data = {
            'chat_id': TELEGRAM_CONFIG['chat_id'],
            'text': message,
            'parse_mode': 'HTML'
        }
        
        # –ö–æ–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        data_encoded = urllib.parse.urlencode(data).encode('utf-8')
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
        req = urllib.request.Request(url, data=data_encoded)
        req.add_header('Content-Type', 'application/x-www-form-urlencoded')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        with urllib.request.urlopen(req, timeout=10) as response:
            result = response.read().decode('utf-8')
            result_json = json.loads(result)
            
            if result_json.get('ok'):
                print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {result_json['result']['message_id']}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {result_json}")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return False

def analyze_football_match(team1, team2, score, time_elapsed):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ—É—Ç–±–æ–ª—å–Ω—ã–π –º–∞—Ç—á"""
    try:
        # –ü–∞—Ä—Å–∏–º —Å—á–µ—Ç
        home_score, away_score = map(int, score.split(':'))
        goal_difference = abs(home_score - away_score)
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        time_minutes = int(re.sub(r'[^\d]', '', time_elapsed) or 0)
        
        confidence = 0
        recommendation = ""
        reasoning = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏
        if (goal_difference >= ANALYSIS_CRITERIA['football']['min_goal_difference'] and
            time_minutes >= ANALYSIS_CRITERIA['football']['min_time_elapsed']):
            
            favorite = team1 if home_score > away_score else team2
            confidence = 80
            recommendation = f"–ü–æ–±–µ–¥–∞ {favorite}"
            reasoning.append(f"–§–∞–≤–æ—Ä–∏—Ç –≤–µ–¥–µ—Ç –Ω–∞ {goal_difference} –≥–æ–ª–∞")
            reasoning.append(f"–í—Ä–µ–º—è –º–∞—Ç—á–∞: {time_minutes} –º–∏–Ω—É—Ç")
        
        return {
            'confidence': confidence,
            'recommendation': recommendation,
            'reasoning': reasoning,
            'should_notify': confidence >= ANALYSIS_CRITERIA['football']['confidence_threshold']
        }
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ—É—Ç–±–æ–ª–∞: {e}")
        return {'confidence': 0, 'recommendation': '', 'reasoning': [], 'should_notify': False}

def analyze_basketball_match(team1, team2, score, quarter):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω—ã–π –º–∞—Ç—á"""
    try:
        # –ü–∞—Ä—Å–∏–º —Å—á–µ—Ç
        home_score, away_score = map(int, score.split(':'))
        point_difference = abs(home_score - away_score)
        
        confidence = 0
        recommendation = ""
        reasoning = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏
        if point_difference >= ANALYSIS_CRITERIA['basketball']['min_point_difference']:
            favorite = team1 if home_score > away_score else team2
            confidence = 70
            recommendation = f"–ü–æ–±–µ–¥–∞ {favorite}"
            reasoning.append(f"–û—Ç—Ä—ã–≤ {point_difference} –æ—á–∫–æ–≤")
            reasoning.append(f"–ö–≤–∞—Ä—Ç–∞–ª: {quarter}")
        
        return {
            'confidence': confidence,
            'recommendation': recommendation,
            'reasoning': reasoning,
            'should_notify': confidence >= ANALYSIS_CRITERIA['basketball']['confidence_threshold']
        }
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±–∞—Å–∫–µ—Ç–±–æ–ª–∞: {e}")
        return {'confidence': 0, 'recommendation': '', 'reasoning': [], 'should_notify': False}

def simulate_live_matches():
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç live –º–∞—Ç—á–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üéØ –°–∏–º—É–ª–∏—Ä—É—é live –º–∞—Ç—á–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")
    
    matches = [
        {
            'sport': 'football',
            'team1': '–ë–∞—Ä—Å–µ–ª–æ–Ω–∞',
            'team2': '–†–µ–∞–ª –ú–∞–¥—Ä–∏–¥',
            'score': '2:0',
            'time': '65\'',
            'quarter': None
        },
        {
            'sport': 'basketball',
            'team1': '–¶–°–ö–ê',
            'team2': '–°–ø–∞—Ä—Ç–∞–∫',
            'score': '85:65',
            'time': None,
            'quarter': '3'
        },
        {
            'sport': 'football',
            'team1': '–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –Æ–Ω–∞–π—Ç–µ–¥',
            'team2': '–õ–∏–≤–µ—Ä–ø—É–ª—å',
            'score': '1:0',
            'time': '45\'',
            'quarter': None
        }
    ]
    
    return matches

def format_telegram_message(match, analysis_result):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram"""
    sport_emoji = {'football': '‚öΩ', 'basketball': 'üèÄ'}.get(match['sport'], 'üèÜ')
    
    message = f"""
üéØ <b>TrueLiveBet - –ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–∞—Ç—á!</b>

{sport_emoji} <b>–í–∏–¥ —Å–ø–æ—Ä—Ç–∞:</b> {match['sport'].title()}
üèÜ <b>–ú–∞—Ç—á:</b> {match['team1']} vs {match['team2']}
üìä <b>–°—á–µ—Ç:</b> {match['score']}
‚è∞ <b>–í—Ä–µ–º—è:</b> {match['time'] or f"–ö–≤–∞—Ä—Ç–∞–ª {match['quarter']}"}
üìà <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {analysis_result['confidence']}%

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> {analysis_result['recommendation'] or '–ê–Ω–∞–ª–∏–∑ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ'}

üîç <b>–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:</b>
"""
    
    for reason in analysis_result['reasoning']:
        message += f"‚Ä¢ {reason}\n"
    
    if not analysis_result['reasoning']:
        message += "‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
    
    message += f"\n‚è∞ <i>–ê–Ω–∞–ª–∏–∑: {datetime.now().strftime('%H:%M:%S')}</i>"
    
    return message

def check_matches():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–∞—Ç—á–∏ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Ö"""
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ç—á–µ–π –≤ {datetime.now().strftime('%H:%M:%S')}...")
    
    # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏ (–≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ —Å–∏–º—É–ª–∏—Ä—É–µ–º)
    matches = simulate_live_matches()
    
    if not matches:
        print("üì≠ –ú–∞—Ç—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(matches)} –º–∞—Ç—á–µ–π")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –º–∞—Ç—á
    for match in matches:
        try:
            print(f"\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é: {match['team1']} vs {match['team2']}")
            
            if match['sport'] == 'football':
                analysis_result = analyze_football_match(
                    match['team1'], match['team2'], 
                    match['score'], match['time']
                )
            elif match['sport'] == 'basketball':
                analysis_result = analyze_basketball_match(
                    match['team1'], match['team2'], 
                    match['score'], match['quarter']
                )
            else:
                continue
            
            print(f"üìà –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis_result['confidence']}%")
            print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {analysis_result['recommendation']}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if analysis_result['should_notify']:
                print("üîî –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...")
                
                message = format_telegram_message(match, analysis_result)
                success = send_telegram_message(message)
                
                if success:
                    print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            else:
                print("‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç—á–∞: {e}")
            continue
    
    print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ {datetime.now().strftime('%H:%M:%S')}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ TrueLiveBet - –ü—Ä–æ—Å—Ç–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä")
    print("=" * 50)
    print(f"‚è∞ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏: {PARSING_CONFIG['interval_minutes']} –º–∏–Ω—É—Ç")
    print(f"üì± Telegram Chat ID: {TELEGRAM_CONFIG['chat_id']}")
    print("=" * 50)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_message = f"""
üéØ <b>TrueLiveBet Bot –∑–∞–ø—É—â–µ–Ω!</b>

‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%H:%M:%S')}
üîç –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏: {PARSING_CONFIG['interval_minutes']} –º–∏–Ω—É—Ç
üìä –ì–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É –º–∞—Ç—á–µ–π

üéâ <b>–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ!</b>
"""
    
    print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    if send_telegram_message(welcome_message):
        print("‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    try:
        while True:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç—á–∏
            check_matches()
            
            # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            wait_time = PARSING_CONFIG['interval_minutes'] * 60
            print(f"\n‚è≥ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {PARSING_CONFIG['interval_minutes']} –º–∏–Ω—É—Ç")
            print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}")
            print("-" * 50)
            
            time.sleep(wait_time)
            
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        stop_message = f"""
üõë <b>TrueLiveBet Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>

‚è∞ –í—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {datetime.now().strftime('%H:%M:%S')}
üìä –ë–æ—Ç –±—É–¥–µ—Ç –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ
"""
        send_telegram_message(stop_message)
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_message = f"""
‚ùå <b>TrueLiveBet Bot - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞</b>

‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}
üö® –û—à–∏–±–∫–∞: {str(e)}

üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
"""
        send_telegram_message(error_message)
        raise

if __name__ == "__main__":
    main()