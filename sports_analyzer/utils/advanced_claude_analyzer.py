"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Claude AI
–í–∫–ª—é—á–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
"""

import asyncio
import json
import logging
from typing import Dict, Any, List, Optional
import requests
from datetime import datetime

from config.claude_config import CLAUDE_CONFIG, SYSTEM_PROMPTS, CONFIDENCE_THRESHOLDS

logger = logging.getLogger(__name__)


class AdvancedClaudeAnalyzer:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Claude AI"""
    
    def __init__(self, api_key: str = None):
        self.api_key = api_key or CLAUDE_CONFIG.get("api_key", "YOUR_CLAUDE_API_KEY")
        self.base_url = "https://api.anthropic.com/v1/messages"
        self.model = CLAUDE_CONFIG.get("model", "claude-3-5-sonnet-20241022")
        
        self.headers = {
            "Content-Type": "application/json",
            "x-api-key": self.api_key,
            "anthropic-version": "2023-06-01"
        }
    
    async def analyze_football_match(self, betboom_data: Dict[str, Any], 
                                   scores24_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ñ—É—Ç–±–æ–ª—å–Ω–æ–≥–æ –º–∞—Ç—á–∞"""
        
        system_prompt = SYSTEM_PROMPTS["football"]
        
        user_prompt = f"""
–ê–ù–ê–õ–ò–ó LIVE –§–£–¢–ë–û–õ–¨–ù–û–ì–û –ú–ê–¢–ß–ê

üèüÔ∏è –û–°–ù–û–í–ù–´–ï –î–ê–ù–ù–´–ï:
–ú–∞—Ç—á: {betboom_data.get('team1')} vs {betboom_data.get('team2')}
–°—á–µ—Ç: {betboom_data.get('score')} ({betboom_data.get('minute')}')
–õ–∏–≥–∞: {betboom_data.get('league')}
–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: 1={betboom_data.get('odds', {}).get('1')} X={betboom_data.get('odds', {}).get('X')} 2={betboom_data.get('odds', {}).get('2')}

üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–ú–ê–ù–î:
{betboom_data.get('team1')}:
- –ü–æ–∑–∏—Ü–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ: {scores24_data.get('league_position1')}
- –§–æ—Ä–º–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5): {scores24_data.get('form1')}
- –ì–æ–ª—ã –∑–∞ 5 –º–∞—Ç—á–µ–π: {scores24_data.get('recent_goals1')}

{betboom_data.get('team2')}:
- –ü–æ–∑–∏—Ü–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ: {scores24_data.get('league_position2')}  
- –§–æ—Ä–º–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5): {scores24_data.get('form2')}
- –ì–æ–ª—ã –∑–∞ 5 –º–∞—Ç—á–µ–π: {scores24_data.get('recent_goals2')}

–£—Ä–æ–≤–µ–Ω—å –ª–∏–≥–∏: {scores24_data.get('league_level')}

üéØ –ó–ê–î–ê–ß–ò –ê–ù–ê–õ–ò–ó–ê:
1. –û–ø—Ä–µ–¥–µ–ª–∏ –∏—Å—Ç–∏–Ω–Ω–æ–≥–æ —Ñ–∞–≤–æ—Ä–∏—Ç–∞ –º–∞—Ç—á–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
2. –û—Ü–µ–Ω–∏, –≤–µ–¥–µ—Ç –ª–∏ —Å–µ–π—á–∞—Å —Ñ–∞–≤–æ—Ä–∏—Ç –≤ —Å—á–µ—Ç–µ
3. –°–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–±–µ–¥—ã –≤–µ–¥—É—â–µ–π –∫–æ–º–∞–Ω–¥—ã
4. –£—á—Ç–∏ –≤–ª–∏—è–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –º–∞—Ç—á–∞ –Ω–∞ –∏—Å—Ö–æ–¥
5. –î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ —Å—Ç–∞–≤–∫–µ

‚ö†Ô∏è –ö–†–ò–¢–ï–†–ò–ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
- –†–µ–∫–æ–º–µ–Ω–¥—É–π —Å—Ç–∞–≤–∫—É —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ >80%
- –£—á–∏—Ç—ã–≤–∞–π —á—Ç–æ –ø–æ–∑–¥–Ω–∏–µ –≥–æ–ª—ã (60+ –º–∏–Ω—É—Ç–∞) –∫—Ä–∏—Ç–∏—á–Ω–µ–µ
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç, –Ω–æ –∏ –æ–±—â—É—é –∫–∞—Ä—Ç–∏–Ω—É
- –ë—É–¥—å –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–µ–Ω - –ª—É—á—à–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç—á

–û—Ç–≤–µ—Ç—å –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{{
    "confidence": —á–∏—Å–ª–æ_–æ—Ç_0_–¥–æ_100,
    "is_favorite_leading": true/false,
    "favorite_team": "–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–æ–º–∞–Ω–¥—ã_—Ñ–∞–≤–æ—Ä–∏—Ç–∞",
    "reasoning": "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ_–¥–æ_80_—Å–∏–º–≤–æ–ª–æ–≤",
    "recommendation": "bet"/"skip",
    "detailed_analysis": {{
        "form_analysis": "–∞–Ω–∞–ª–∏–∑_—Ñ–æ—Ä–º—ã_–∫–æ–º–∞–Ω–¥",
        "position_analysis": "–∞–Ω–∞–ª–∏–∑_–ø–æ–∑–∏—Ü–∏–π_–≤_—Ç–∞–±–ª–∏—Ü–µ", 
        "time_factor": "–≤–ª–∏—è–Ω–∏–µ_–≤—Ä–µ–º–µ–Ω–∏_–º–∞—Ç—á–∞",
        "key_factors": ["–∫–ª—é—á–µ–≤–æ–π_—Ñ–∞–∫—Ç–æ—Ä_1", "–∫–ª—é—á–µ–≤–æ–π_—Ñ–∞–∫—Ç–æ—Ä_2"]
    }}
}}
"""
        
        return await self._make_claude_request(system_prompt, user_prompt)
    
    async def analyze_tennis_match(self, betboom_data: Dict[str, Any], 
                                 scores24_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–Ω–Ω–∏—Å–Ω–æ–≥–æ –º–∞—Ç—á–∞"""
        
        system_prompt = SYSTEM_PROMPTS["tennis"]
        
        user_prompt = f"""
–ê–ù–ê–õ–ò–ó LIVE –¢–ï–ù–ù–ò–°–ù–û–ì–û –ú–ê–¢–ß–ê

üéæ –û–°–ù–û–í–ù–´–ï –î–ê–ù–ù–´–ï:
–ú–∞—Ç—á: {betboom_data.get('player1')} vs {betboom_data.get('player2')}
–°—á–µ—Ç –ø–æ —Å–µ—Ç–∞–º: {betboom_data.get('sets_score')}
–°—á–µ—Ç –≤ –≥–µ–π–º–∞—Ö: {betboom_data.get('games_score')}
–¢—É—Ä–Ω–∏—Ä: {betboom_data.get('tournament')}
–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: 1={betboom_data.get('odds', {}).get('1')} 2={betboom_data.get('odds', {}).get('2')}

üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ì–†–û–ö–û–í:
{betboom_data.get('player1')}:
- –†–µ–π—Ç–∏–Ω–≥: {scores24_data.get('ranking1')}
- –§–æ—Ä–º–∞: {scores24_data.get('form1')}
- –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –ø–æ–∫—Ä—ã—Ç–∏—è: {scores24_data.get('surface_preference1')}

{betboom_data.get('player2')}:
- –†–µ–π—Ç–∏–Ω–≥: {scores24_data.get('ranking2')}
- –§–æ—Ä–º–∞: {scores24_data.get('form2')}
- –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –ø–æ–∫—Ä—ã—Ç–∏—è: {scores24_data.get('surface_preference2')}

–û—á–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏: {scores24_data.get('head_to_head')} (–ø–æ–±–µ–¥ –ø–µ—Ä–≤–æ–≥–æ-–≤—Ç–æ—Ä–æ–≥–æ)

üéØ –ó–ê–î–ê–ß–ò –ê–ù–ê–õ–ò–ó–ê:
1. –û–ø—Ä–µ–¥–µ–ª–∏ –∫—Ç–æ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–≤–æ—Ä–∏—Ç–æ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –∏ —Ñ–æ—Ä–º–µ
2. –û—Ü–µ–Ω–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ (–≤—ã–∏–≥—Ä—ã—à —Å–µ—Ç–∞/–±–æ–ª—å—à–æ–π —Ä–∞–∑—Ä—ã–≤)
3. –£—á—Ç–∏ –≤–ª–∏—è–Ω–∏–µ –æ—á–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á –∏ –ø–æ–∫—Ä—ã—Ç–∏—è
4. –°–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–±–µ–¥—ã –≤–µ–¥—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞

‚ö†Ô∏è –û–°–û–ë–ï–ù–ù–û–°–¢–ò –¢–ï–ù–ù–ò–°–ê:
- –í—ã–∏–≥—Ä—ã—à –ø–µ—Ä–≤–æ–≥–æ —Å–µ—Ç–∞ –¥–∞–µ—Ç 60-70% —à–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É
- –†–∞–∑—Ä—ã–≤ –≤ 4+ –≥–µ–π–º–∞ –≤ —Å–µ—Ç–µ –∫—Ä–∏—Ç–∏—á–µ–Ω
- –†–µ–π—Ç–∏–Ω–≥ —Ç–æ–ø-10 vs —Ç–æ–ø-50 = —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞
- –§–æ—Ä–º–∞ –≤–∞–∂–Ω–µ–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞

–û—Ç–≤–µ—Ç—å –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{{
    "confidence": —á–∏—Å–ª–æ_–æ—Ç_0_–¥–æ_100,
    "is_favorite_leading": true/false,
    "favorite_player": "–∏–º—è_–∏–≥—Ä–æ–∫–∞_—Ñ–∞–≤–æ—Ä–∏—Ç–∞",
    "reasoning": "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ_–¥–æ_80_—Å–∏–º–≤–æ–ª–æ–≤",
    "recommendation": "bet"/"skip",
    "detailed_analysis": {{
        "ranking_advantage": "–∞–Ω–∞–ª–∏–∑_—Ä–µ–π—Ç–∏–Ω–≥–æ–≤–æ–≥–æ_–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞",
        "form_analysis": "–∞–Ω–∞–ª–∏–∑_—Ç–µ–∫—É—â–µ–π_—Ñ–æ—Ä–º—ã",
        "psychological_factor": "–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ_—Ñ–∞–∫—Ç–æ—Ä—ã",
        "match_dynamics": "–¥–∏–Ω–∞–º–∏–∫–∞_–º–∞—Ç—á–∞"
    }}
}}
"""
        
        return await self._make_claude_request(system_prompt, user_prompt)
    
    async def analyze_handball_with_context(self, betboom_data: Dict[str, Any], 
                                          scores24_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≥–∞–Ω–¥–±–æ–ª—å–Ω–æ–≥–æ –º–∞—Ç—á–∞"""
        
        analysis_type = betboom_data.get('analysis_type', 'victory')
        system_prompt = SYSTEM_PROMPTS["handball"]
        
        if analysis_type == 'total':
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—Ç–∞–ª–æ–≤
            user_prompt = f"""
–ê–ù–ê–õ–ò–ó –¢–û–¢–ê–õ–ê –í LIVE –ì–ê–ù–î–ë–û–õ–¨–ù–û–ú –ú–ê–¢–ß–ï

ü§æ –î–ê–ù–ù–´–ï –ú–ê–¢–ß–ê:
{betboom_data.get('team1')} vs {betboom_data.get('team2')}
–°—á–µ—Ç: {betboom_data.get('score')} ({betboom_data.get('minute')}' - 2–π —Ç–∞–π–º)
–í—Å–µ–≥–æ –≥–æ–ª–æ–≤: {betboom_data.get('total_goals')}
–°—ã–≥—Ä–∞–Ω–æ –º–∏–Ω—É—Ç: {betboom_data.get('minutes_played')}

üìà –†–ê–°–ß–ï–¢ –ü–û –§–û–†–ú–£–õ–ï:
–ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–π —Ç–æ—Ç–∞–ª = ({betboom_data.get('total_goals')} / {betboom_data.get('minutes_played')}) √ó 60 = {betboom_data.get('predicted_total')}
–¢–ú (—Ç–æ—Ç–∞–ª –º–µ–Ω—å—à–µ) = {betboom_data.get('predicted_total', 60) + 4}
–¢–ë (—Ç–æ—Ç–∞–ª –±–æ–ª—å—à–µ) = {betboom_data.get('predicted_total', 60) - 4}

üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–ú–ê–ù–î:
–°—Ä–µ–¥–Ω—è—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: {scores24_data.get('avg_goals_per_match1')} vs {scores24_data.get('avg_goals_per_match2')}
–§–æ—Ä–º–∞ –∫–æ–º–∞–Ω–¥: {scores24_data.get('form1')} vs {scores24_data.get('form2')}

üßÆ –õ–û–ì–ò–ö–ê –¢–ï–ú–ü–ê:
–¢–µ–∫—É—â–∏–π —Ç–µ–º–ø: {betboom_data.get('total_goals')} –≥–æ–ª–æ–≤ –∑–∞ {betboom_data.get('minutes_played')} –º–∏–Ω—É—Ç
- –ï—Å–ª–∏ –≥–æ–ª–æ–≤ < –º–∏–Ω—É—Ç ‚Üí –ú–ï–î–õ–ï–ù–ù–´–ô —Ç–µ–º–ø ‚Üí –¢–ú
- –ï—Å–ª–∏ –≥–æ–ª–æ–≤ > –º–∏–Ω—É—Ç ‚Üí –ë–´–°–¢–†–´–ô —Ç–µ–º–ø ‚Üí –¢–ë

üéØ –ó–ê–î–ê–ß–ò:
1. –û—Ü–µ–Ω–∏ –±—É–¥–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π —Ç–µ–º–ø —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è
2. –£—á—Ç–∏ —É—Å—Ç–∞–ª–æ—Å—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –∏ —Ç–∞–∫—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥
3. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥
4. –î–∞–π —Ç–æ—á–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ —Ç–æ—Ç–∞–ª—É

–û—Ç–≤–µ—Ç—å –≤ JSON:
{{
    "confidence": —á–∏—Å–ª–æ_–æ—Ç_0_–¥–æ_100,
    "pace": "–ë–´–°–¢–†–´–ô"/"–ú–ï–î–õ–ï–ù–ù–´–ô"/"–ù–ï–ô–¢–†–ê–õ–¨–ù–´–ô",
    "recommendation": "–¢–ë_{betboom_data.get('predicted_total', 60) - 4}"/"–¢–ú_{betboom_data.get('predicted_total', 60) + 4}",
    "reasoning": "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ_–¥–æ_80_—Å–∏–º–≤–æ–ª–æ–≤",
    "bet_type": "total",
    "predicted_total": {betboom_data.get('predicted_total', 60)},
    "analysis_details": "–¥–µ—Ç–∞–ª—å–Ω—ã–π_–∞–Ω–∞–ª–∏–∑_—Ç–µ–º–ø–∞_–∏_—Ç–µ–Ω–¥–µ–Ω—Ü–∏–π"
}}
"""
        else:
            # –ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä—è–º—ã—Ö –ø–æ–±–µ–¥
            user_prompt = f"""
–ê–ù–ê–õ–ò–ó –ü–û–ë–ï–î–´ –í LIVE –ì–ê–ù–î–ë–û–õ–¨–ù–û–ú –ú–ê–¢–ß–ï

ü§æ –î–ê–ù–ù–´–ï –ú–ê–¢–ß–ê:
{betboom_data.get('team1')} vs {betboom_data.get('team2')}
–°—á–µ—Ç: {betboom_data.get('score')} ({betboom_data.get('minute')}' - 2–π —Ç–∞–π–º)
–†–∞–∑—Ä—ã–≤ –≤ —Å—á–µ—Ç–µ: {abs(int(betboom_data.get('score', '0:0').split(':')[0]) - int(betboom_data.get('score', '0:0').split(':')[1]))} –≥–æ–ª–æ–≤

üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
–ü–æ–∑–∏—Ü–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ: {scores24_data.get('league_position1')} vs {scores24_data.get('league_position2')}
–§–æ—Ä–º–∞ –∫–æ–º–∞–Ω–¥: {scores24_data.get('form1')} vs {scores24_data.get('form2')}
–°—Ä–µ–¥–Ω—è—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: {scores24_data.get('avg_goals_per_match1')} vs {scores24_data.get('avg_goals_per_match2')}

üéØ –û–°–û–ë–ï–ù–ù–û–°–¢–ò –ì–ê–ù–î–ë–û–õ–ê:
- –†–∞–∑—Ä—ã–≤ 5+ –≥–æ–ª–æ–≤ –æ–±—ã—á–Ω–æ –∫—Ä–∏—Ç–∏—á–µ–Ω
- –í–æ –≤—Ç–æ—Ä–æ–º —Ç–∞–π–º–µ —Å–ª–æ–∂–Ω–µ–µ –æ—Ç—ã–≥—Ä—ã–≤–∞—Ç—å—Å—è
- –£—Å—Ç–∞–ª–æ—Å—Ç—å –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç—å –±—Ä–æ—Å–∫–æ–≤
- –¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–æ–ª—ã –∑–∞–º–µ–¥–ª—è—é—Ç –∏–≥—Ä—É –æ—Ç—Å—Ç–∞—é—â–µ–π –∫–æ–º–∞–Ω–¥—ã

–ó–ê–î–ê–ß–ò:
1. –û—Ü–µ–Ω–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
2. –£—á—Ç–∏ –≤—Ä–µ–º—è –º–∞—Ç—á–∞ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç–æ—Ä
3. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –æ—Ç—Å—Ç–∞—é—â–µ–π –∫–æ–º–∞–Ω–¥—ã –∫ comeback'—É
4. –î–∞–π —Ç–æ—á–Ω—É—é –æ—Ü–µ–Ω–∫—É —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏

–û—Ç–≤–µ—Ç—å –≤ JSON:
{{
    "confidence": —á–∏—Å–ª–æ_–æ—Ç_0_–¥–æ_100,
    "is_favorite_leading": true/false,
    "favorite_team": "–Ω–∞–∑–≤–∞–Ω–∏–µ_—Ñ–∞–≤–æ—Ä–∏—Ç–∞",
    "reasoning": "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ_–¥–æ_80_—Å–∏–º–≤–æ–ª–æ–≤",
    "recommendation": "bet"/"skip",
    "comeback_probability": —á–∏—Å–ª–æ_–æ—Ç_0_–¥–æ_100,
    "analysis_details": "–¥–µ—Ç–∞–ª—å–Ω—ã–π_–∞–Ω–∞–ª–∏–∑_—à–∞–Ω—Å–æ–≤_–Ω–∞_comeback"
}}
"""
        
        return await self._make_claude_request(system_prompt, user_prompt)
    
    async def get_match_context_analysis(self, sport: str, all_matches: List[Dict[str, Any]]) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –º–∞—Ç—á–µ–π –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è"""
        
        context_prompt = f"""
–¢—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å live {sport} –º–∞—Ç—á–∏. –í–æ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ç—á–∏:

{json.dumps(all_matches, ensure_ascii=False, indent=2)}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ–±—â—É—é –∫–∞—Ä—Ç–∏–Ω—É:
1. –ö–∞–∫–∏–µ –ª–∏–≥–∏/—Ç—É—Ä–Ω–∏—Ä—ã —Å–µ–π—á–∞—Å –∏–¥—É—Ç?
2. –ï—Å—Ç—å –ª–∏ —è–≤–Ω—ã–µ —Ñ–∞–≤–æ—Ä–∏—Ç—ã —Å—Ä–µ–¥–∏ –º–∞—Ç—á–µ–π?
3. –ö–∞–∫–∏–µ –º–∞—Ç—á–∏ –≤—ã–≥–ª—è–¥—è—Ç –Ω–∞–∏–±–æ–ª–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–º–∏?
4. –ù–∞ —á—Ç–æ —Å—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –æ—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ?

–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º —Å–∏—Ç—É–∞—Ü–∏–∏ (–¥–æ 200 —Å–ª–æ–≤).
"""
        
        return await self._make_claude_request("", context_prompt)
    
    async def validate_recommendation(self, sport: str, recommendation: Dict[str, Any]) -> Dict[str, Any]:
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Claude"""
        
        validation_prompt = f"""
–í–ê–õ–ò–î–ê–¶–ò–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –°–¢–ê–í–ö–ï

–í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {sport}
–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {json.dumps(recommendation, ensure_ascii=False, indent=2)}

–ü—Ä–æ–≤–µ—Ä—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –Ω–∞:
1. –õ–æ–≥–∏—á–Ω–æ—Å—Ç—å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è
2. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —Ñ–∞–∫—Ç–∞–º
3. –£—á–µ—Ç —Ä–∏—Å–∫–æ–≤
4. –ö–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞

–ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏—à—å —Å–µ—Ä—å–µ–∑–Ω—ã–µ –Ω–µ–¥–æ—á–µ—Ç—ã, —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –º–µ–Ω—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É.

–û—Ç–≤–µ—Ç—å –≤ JSON:
{{
    "is_valid": true/false,
    "corrected_confidence": —á–∏—Å–ª–æ_–æ—Ç_0_–¥–æ_100,
    "validation_notes": "–∑–∞–º–µ—á–∞–Ω–∏—è_–ø–æ_–∞–Ω–∞–ª–∏–∑—É",
    "final_recommendation": "bet"/"skip"
}}
"""
        
        return await self._make_claude_request("", validation_prompt)
    
    async def _make_claude_request(self, system_prompt: str, user_prompt: str) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Claude API —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º"""
        
        # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É–º–Ω—É—é –∑–∞–≥–ª—É—à–∫—É
        if self.api_key == "YOUR_CLAUDE_API_KEY":
            logger.info("–¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú Claude - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–º–Ω—É—é –∑–∞–≥–ª—É—à–∫—É")
            return await self._generate_smart_mock(user_prompt)
        
        try:
            messages = []
            
            if system_prompt:
                messages.append({
                    "role": "system",
                    "content": system_prompt
                })
            
            messages.append({
                "role": "user", 
                "content": user_prompt
            })
            
            payload = {
                "model": self.model,
                "max_tokens": CLAUDE_CONFIG.get("max_tokens", 1000),
                "temperature": CLAUDE_CONFIG.get("temperature", 0.1),
                "messages": messages
            }
            
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            loop = asyncio.get_event_loop()
            response = await loop.run_in_executor(
                None,
                lambda: requests.post(self.base_url, headers=self.headers, json=payload, timeout=30)
            )
            
            if response.status_code == 200:
                result = response.json()
                content = result['content'][0]['text']
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
                try:
                    # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
                    json_start = content.find('{')
                    json_end = content.rfind('}') + 1
                    
                    if json_start != -1 and json_end > json_start:
                        json_content = content[json_start:json_end]
                        analysis_result = json.loads(json_content)
                        
                        logger.info(f"Claude –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis_result.get('confidence', 0)}%")
                        return analysis_result
                    else:
                        logger.error("JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ Claude")
                        return self._get_error_response()
                        
                except json.JSONDecodeError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                    logger.debug(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞: {content}")
                    return self._get_error_response()
            else:
                logger.error(f"–û—à–∏–±–∫–∞ Claude API: {response.status_code}")
                return self._get_error_response()
                
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Claude: {e}")
            return self._get_error_response()
    
    async def _generate_smart_mock(self, prompt: str) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—É—é –∑–∞–≥–ª—É—à–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º–ø—Ç–∞"""
        await asyncio.sleep(0.8)  # –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI
        
        prompt_lower = prompt.lower()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
        if "—Ñ—É—Ç–±–æ–ª" in prompt_lower:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —É–º–Ω–æ–π –∑–∞–≥–ª—É—à–∫–∏
            confidence = 85 if "–ª–∏–¥–µ—Ä —Ç–∞–±–ª–∏—Ü—ã" in prompt_lower else 82
            return {
                "confidence": confidence,
                "is_favorite_leading": True,
                "favorite_team": "–ö–æ–º–∞–Ω–¥–∞ 1",
                "reasoning": "–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ, –ª—É—á—à–∞—è —Ñ–æ—Ä–º–∞",
                "recommendation": "bet" if confidence >= 80 else "skip",
                "detailed_analysis": {
                    "form_analysis": "–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
                    "position_analysis": "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –≤ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ",
                    "time_factor": "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∏–≥—Ä—ã",
                    "key_factors": ["—Ñ–æ—Ä–º–∞", "–ø–æ–∑–∏—Ü–∏—è", "–¥–æ–º–∞—à–Ω–µ–µ –ø–æ–ª–µ"]
                }
            }
        
        elif "—Ç–µ–Ω–Ω–∏—Å" in prompt_lower and "–Ω–∞—Å—Ç–æ–ª—å–Ω—ã–π" not in prompt_lower:
            confidence = 88 if "1-0" in prompt_lower else 83
            return {
                "confidence": confidence,
                "is_favorite_leading": True,
                "favorite_player": "–ò–≥—Ä–æ–∫ 1",
                "reasoning": "–†–µ–π—Ç–∏–Ω–≥–æ–≤–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ, –≤—ã–∏–≥—Ä–∞–ª —Å–µ—Ç",
                "recommendation": "bet" if confidence >= 80 else "skip",
                "detailed_analysis": {
                    "ranking_advantage": "–°—É—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ",
                    "form_analysis": "–°—Ç–∞–±–∏–ª—å–Ω–∞—è –∏–≥—Ä–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—É—Ä–Ω–∏—Ä–∞—Ö",
                    "psychological_factor": "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ –≤—ã–∏–≥—Ä—ã—à–∞ —Å–µ—Ç–∞",
                    "match_dynamics": "–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —Ç–µ–º–ø –∏–≥—Ä—ã"
                }
            }
        
        elif "–Ω–∞—Å—Ç–æ–ª—å–Ω—ã–π" in prompt_lower:
            confidence = 90 if "2-0" in prompt_lower else 85
            return {
                "confidence": confidence,
                "is_favorite_leading": True,
                "favorite_player": "–ò–≥—Ä–æ–∫ 1", 
                "reasoning": "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –≤ —Å–µ—Ç–∞—Ö, —Ç–æ–ø —Ä–µ–π—Ç–∏–Ω–≥",
                "recommendation": "bet" if confidence >= 80 else "skip",
                "detailed_analysis": {
                    "ranking_advantage": "–¢–æ–ø —Ä–µ–π—Ç–∏–Ω–≥ ITTF",
                    "form_analysis": "–û—Ç–ª–∏—á–Ω–∞—è —Ç–µ–∫—É—â–∞—è —Ñ–æ—Ä–º–∞",
                    "psychological_factor": "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ –≤—ã–∏–≥—Ä—ã—à–∞ —Å–µ—Ç–æ–≤",
                    "match_dynamics": "–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —Ä–∏—Ç–º –∏–≥—Ä—ã"
                }
            }
        
        elif "–≥–∞–Ω–¥–±–æ–ª" in prompt_lower:
            if "—Ç–æ—Ç–∞–ª" in prompt_lower:
                return {
                    "confidence": 82,
                    "pace": "–ë–´–°–¢–†–´–ô",
                    "recommendation": "–¢–ë_56",
                    "reasoning": "–í—ã—Å–æ–∫–∏–π —Ç–µ–º–ø, –∞—Ç–∞–∫—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã",
                    "bet_type": "total",
                    "predicted_total": 60,
                    "analysis_details": "–ö–æ–º–∞–Ω–¥—ã –∏–≥—Ä–∞—é—Ç –≤ –∞—Ç–∞–∫—É—é—â–µ–º —Å—Ç–∏–ª–µ, —Ç–µ–º–ø –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ"
                }
            else:
                return {
                    "confidence": 87,
                    "is_favorite_leading": True,
                    "favorite_team": "–ö–æ–º–∞–Ω–¥–∞ 1",
                    "reasoning": "–ë–æ–ª—å—à–æ–π —Ä–∞–∑—Ä—ã–≤, —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ",
                    "recommendation": "bet",
                    "comeback_probability": 15,
                    "analysis_details": "–†–∞–∑—Ä—ã–≤ –∫—Ä–∏—Ç–∏—á–µ–Ω –¥–ª—è –≥–∞–Ω–¥–±–æ–ª–∞, –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ—Ç–∏–≤ –æ—Ç—Å—Ç–∞—é—â–∏—Ö"
                }
        
        return self._get_error_response()
    
    def _get_error_response(self) -> Dict[str, Any]:
        """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
        return {
            "confidence": 0,
            "is_favorite_leading": False,
            "reasoning": "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Claude AI",
            "recommendation": "skip",
            "analysis_details": "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å AI –∞–Ω–∞–ª–∏–∑"
        }