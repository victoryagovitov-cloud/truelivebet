"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è Telegram
"""

import asyncio
from datetime import datetime
from typing import Dict, List, Any
import requests
import logging

from config.settings import OUTPUT_TEMPLATES, REPORT_HEADER, REPORT_FOOTER, SPORT_SEPARATORS

logger = logging.getLogger(__name__)


class ReportGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
    
    def __init__(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Telegram –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
        try:
            import sys
            import os
            sys.path.append('/workspace')
            from telegram_config import TELEGRAM_CONFIG
            self.telegram_config = TELEGRAM_CONFIG
        except ImportError:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å telegram_config, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏")
            self.telegram_config = {
                "bot_token": "YOUR_BOT_TOKEN_HERE",
                "chat_id": "@truelivebet",
                "test_mode": True
            }
    
    def format_match_recommendation(self, sport: str, match_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ –º–∞—Ç—á—É —Å–æ–≥–ª–∞—Å–Ω–æ —à–∞–±–ª–æ–Ω—É"""
        template_key = sport
        
        # –î–ª—è –≥–∞–Ω–¥–±–æ–ª–∞ –≤—ã–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å—Ç–∞–≤–∫–∏
        if sport == 'handball':
            if match_data.get('bet_type') == 'total':
                template_key = 'handball_total'
            else:
                template_key = 'handball_victory'
        
        template = OUTPUT_TEMPLATES.get(template_key, "")
        
        try:
            return template.format(**match_data)
        except KeyError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ {template_key}: {e}")
            return f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞: {match_data}"
    
    def generate_telegram_report(self, analysis_results: Dict[str, List[Dict[str, Any]]]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è Telegram"""
        now = datetime.now()
        time_str = now.strftime("%H:%M")
        date_str = now.strftime("%d.%m.%Y")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
        report_lines = [REPORT_HEADER.format(time=time_str, date=date_str)]
        report_lines.append("")
        
        # –°—á–µ—Ç—á–∏–∫ –¥–ª—è —Å–∫–≤–æ–∑–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏
        recommendation_counter = 1
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
        sport_order = ['football', 'tennis', 'table_tennis', 'handball']
        
        for sport in sport_order:
            recommendations = analysis_results.get(sport, [])
            
            if recommendations:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
                report_lines.append(SPORT_SEPARATORS[sport])
                report_lines.append("")
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                for recommendation in recommendations:
                    formatted_rec = self.format_match_recommendation(sport, recommendation)
                    numbered_rec = f"{recommendation_counter}. {formatted_rec}"
                    report_lines.append(numbered_rec)
                    report_lines.append("")
                    recommendation_counter += 1
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        if recommendation_counter == 1:
            report_lines.append("<b>üì≠ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–∞—Ç—á–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>")
            report_lines.append("")
            report_lines.append("<i>–°–ª–µ–¥—É—é—â–∏–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ 50 –º–∏–Ω—É—Ç</i>")
            report_lines.append("")
        
        # –ü–æ–¥–≤–∞–ª –æ—Ç—á–µ—Ç–∞
        report_lines.append(REPORT_FOOTER)
        
        return "\n".join(report_lines)
    
    async def send_to_telegram(self, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        if self.telegram_config.get("test_mode", True):
            logger.info("–¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú - —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            logger.info(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n{message}")
            return True
        
        try:
            bot_token = self.telegram_config.get("bot_token")
            chat_id = self.telegram_config.get("chat_id")
            
            if not bot_token or bot_token == "YOUR_BOT_TOKEN_HERE":
                logger.error("–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return False
            
            url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
            
            payload = {
                "chat_id": chat_id,
                "text": message,
                "parse_mode": "HTML",
                "disable_web_page_preview": True
            }
            
            response = requests.post(url, json=payload, timeout=10)
            
            if response.status_code == 200:
                logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
            return False
    
    def save_report_to_file(self, report: str, filename: str = None) -> str:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª"""
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"/workspace/recommendations/live_report_{timestamp}.md"
        
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            import os
            os.makedirs(os.path.dirname(filename), exist_ok=True)
            
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(report)
            
            logger.info(f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}")
            return filename
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            return ""