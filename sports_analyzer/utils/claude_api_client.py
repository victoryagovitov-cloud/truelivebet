"""
–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Claude API —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É Anthropic
"""

import asyncio
import json
import logging
from typing import Dict, Any
from anthropic import Anthropic

from config.claude_config import CLAUDE_CONFIG, SYSTEM_PROMPTS

logger = logging.getLogger(__name__)


class ClaudeAPIClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Claude API"""
    
    def __init__(self):
        self.api_key = CLAUDE_CONFIG.get("api_key")
        self.model = CLAUDE_CONFIG.get("model")
        self.max_tokens = CLAUDE_CONFIG.get("max_tokens", 1000)
        self.temperature = CLAUDE_CONFIG.get("temperature", 0.1)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Anthropic
        if self.api_key and "YOUR_CLAUDE_API_KEY" not in self.api_key:
            self.client = Anthropic(api_key=self.api_key)
            self.is_real_api = True
            logger.info("Claude API –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ä–µ–∞–ª—å–Ω—ã–º –∫–ª—é—á–æ–º")
        else:
            self.client = None
            self.is_real_api = False
            logger.info("Claude API —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
    
    async def analyze_football_match(self, betboom_data: Dict[str, Any], 
                                   scores24_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ñ—É—Ç–±–æ–ª—å–Ω–æ–≥–æ –º–∞—Ç—á–∞"""
        
        if not self.is_real_api:
            return await self._mock_football_analysis(betboom_data, scores24_data)
        
        system_prompt = SYSTEM_PROMPTS["football"]
        
        user_prompt = f"""
–ê–ù–ê–õ–ò–ó LIVE –§–£–¢–ë–û–õ–¨–ù–û–ì–û –ú–ê–¢–ß–ê

üèüÔ∏è –û–°–ù–û–í–ù–´–ï –î–ê–ù–ù–´–ï:
–ú–∞—Ç—á: {betboom_data.get('team1')} vs {betboom_data.get('team2')}
–°—á–µ—Ç: {betboom_data.get('score')} ({betboom_data.get('minute')}')
–õ–∏–≥–∞: {betboom_data.get('league')}
–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: 1={betboom_data.get('odds', {}).get('1')} X={betboom_data.get('odds', {}).get('X')} 2={betboom_data.get('odds', {}).get('2')}

üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–ú–ê–ù–î:
{betboom_data.get('team1')}:
- –ü–æ–∑–∏—Ü–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ: {scores24_data.get('league_position1')}
- –§–æ—Ä–º–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5): {scores24_data.get('form1')}
- –ì–æ–ª—ã –∑–∞ 5 –º–∞—Ç—á–µ–π: {scores24_data.get('recent_goals1')}

{betboom_data.get('team2')}:
- –ü–æ–∑–∏—Ü–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ: {scores24_data.get('league_position2')}  
- –§–æ—Ä–º–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5): {scores24_data.get('form2')}
- –ì–æ–ª—ã –∑–∞ 5 –º–∞—Ç—á–µ–π: {scores24_data.get('recent_goals2')}

üéØ –ó–ê–î–ê–ß–ê: –û–ø—Ä–µ–¥–µ–ª–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–±–µ–¥—ã –≤–µ–¥—É—â–µ–π –∫–æ–º–∞–Ω–¥—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–π —Å—Ç–∞–≤–∫—É —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ >80%.

–û—Ç–≤–µ—Ç—å –°–¢–†–û–ì–û –≤ JSON:
{{
    "confidence": —á–∏—Å–ª–æ_–æ—Ç_0_–¥–æ_100,
    "is_favorite_leading": true/false,
    "reasoning": "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ_–¥–æ_80_—Å–∏–º–≤–æ–ª–æ–≤",
    "recommendation": "bet"/"skip"
}}
"""
        
        return await self._make_api_request(system_prompt, user_prompt)
    
    async def analyze_tennis_match(self, betboom_data: Dict[str, Any], 
                                 scores24_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ç–µ–Ω–Ω–∏—Å–Ω–æ–≥–æ –º–∞—Ç—á–∞"""
        
        if not self.is_real_api:
            return await self._mock_tennis_analysis(betboom_data, scores24_data)
        
        system_prompt = SYSTEM_PROMPTS["tennis"]
        
        user_prompt = f"""
–ê–ù–ê–õ–ò–ó LIVE –¢–ï–ù–ù–ò–°–ù–û–ì–û –ú–ê–¢–ß–ê

üéæ –î–ê–ù–ù–´–ï:
{betboom_data.get('player1')} vs {betboom_data.get('player2')}
–°—á–µ—Ç: {betboom_data.get('sets_score')} | {betboom_data.get('games_score')}
–¢—É—Ä–Ω–∏—Ä: {betboom_data.get('tournament')}

üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
–†–µ–π—Ç–∏–Ω–≥–∏: {scores24_data.get('ranking1')} vs {scores24_data.get('ranking2')}
–§–æ—Ä–º–∞: {scores24_data.get('form1')} vs {scores24_data.get('form2')}
–û—á–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏: {scores24_data.get('head_to_head')}

üéØ –ó–ê–î–ê–ß–ê: –û—Ü–µ–Ω–∏ —à–∞–Ω—Å—ã –≤–µ–¥—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–∞ –ø–æ–±–µ–¥—É.

–û—Ç–≤–µ—Ç—å –≤ JSON:
{{
    "confidence": —á–∏—Å–ª–æ_–æ—Ç_0_–¥–æ_100,
    "is_favorite_leading": true/false,
    "reasoning": "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ_–¥–æ_80_—Å–∏–º–≤–æ–ª–æ–≤",
    "recommendation": "bet"/"skip"
}}
"""
        
        return await self._make_api_request(system_prompt, user_prompt)
    
    async def analyze_handball_total(self, betboom_data: Dict[str, Any], 
                                   scores24_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ç–æ—Ç–∞–ª–∞ –≤ –≥–∞–Ω–¥–±–æ–ª–µ"""
        
        if not self.is_real_api:
            return await self._mock_handball_total(betboom_data, scores24_data)
        
        system_prompt = SYSTEM_PROMPTS["handball"]
        
        total_goals = betboom_data.get('total_goals', 0)
        minutes = betboom_data.get('minutes_played', 60)
        predicted_total = betboom_data.get('predicted_total', 60)
        
        user_prompt = f"""
–ê–ù–ê–õ–ò–ó –¢–û–¢–ê–õ–ê –í –ì–ê–ù–î–ë–û–õ–ï

ü§æ –ú–ê–¢–ß: {betboom_data.get('team1')} vs {betboom_data.get('team2')}
–°—á–µ—Ç: {betboom_data.get('score')} ({betboom_data.get('minute')}')
–ì–æ–ª–æ–≤: {total_goals}, –ú–∏–Ω—É—Ç: {minutes}

üìà –†–ê–°–ß–ï–¢: –ü–¢ = {predicted_total}
–¢–ú = {predicted_total + 4}, –¢–ë = {predicted_total - 4}

üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
–†–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: {scores24_data.get('avg_goals_per_match1')} vs {scores24_data.get('avg_goals_per_match2')}

üéØ –ó–ê–î–ê–ß–ê: –û–ø—Ä–µ–¥–µ–ª–∏ —Ç–µ–º–ø –∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–π —Ç–æ—Ç–∞–ª.

–û—Ç–≤–µ—Ç—å –≤ JSON:
{{
    "confidence": —á–∏—Å–ª–æ_–æ—Ç_0_–¥–æ_100,
    "pace": "–ë–´–°–¢–†–´–ô"/"–ú–ï–î–õ–ï–ù–ù–´–ô",
    "recommendation": "–¢–ë_{predicted_total - 4}"/"–¢–ú_{predicted_total + 4}",
    "reasoning": "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ",
    "bet_type": "total"
}}
"""
        
        return await self._make_api_request(system_prompt, user_prompt)
    
    async def _make_api_request(self, system_prompt: str, user_prompt: str) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Claude API"""
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É Anthropic
            loop = asyncio.get_event_loop()
            
            response = await loop.run_in_executor(
                None,
                lambda: self.client.messages.create(
                    model=self.model,
                    max_tokens=self.max_tokens,
                    temperature=self.temperature,
                    system=system_prompt,
                    messages=[
                        {
                            "role": "user",
                            "content": user_prompt
                        }
                    ]
                )
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            content = response.content[0].text
            
            # –ü–∞—Ä—Å–∏–º JSON
            try:
                # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
                json_start = content.find('{')
                json_end = content.rfind('}') + 1
                
                if json_start != -1 and json_end > json_start:
                    json_content = content[json_start:json_end]
                    result = json.loads(json_content)
                    
                    logger.info(f"‚úÖ Claude –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.get('confidence', 0)}%")
                    return result
                else:
                    logger.error("JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ Claude")
                    return self._get_error_response()
                    
            except json.JSONDecodeError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                logger.debug(f"–û—Ç–≤–µ—Ç Claude: {content}")
                return self._get_error_response()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Claude API: {e}")
            return self._get_error_response()
    
    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
    async def _mock_football_analysis(self, betboom_data: Dict[str, Any], 
                                    scores24_data: Dict[str, Any]) -> Dict[str, Any]:
        await asyncio.sleep(0.3)
        return {
            "confidence": 85,
            "is_favorite_leading": True,
            "reasoning": "–õ–∏–¥–µ—Ä —Ç–∞–±–ª–∏—Ü—ã –≤–µ–¥–µ—Ç –¥–æ–º–∞, –æ—Ç–ª–∏—á–Ω–∞—è —Ñ–æ—Ä–º–∞",
            "recommendation": "bet"
        }
    
    async def _mock_tennis_analysis(self, betboom_data: Dict[str, Any], 
                                  scores24_data: Dict[str, Any]) -> Dict[str, Any]:
        await asyncio.sleep(0.3)
        return {
            "confidence": 88,
            "is_favorite_leading": True,
            "reasoning": "–í—ã–∏–≥—Ä–∞–ª —Å–µ—Ç, –≤—ã—à–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ, —Ö–æ—Ä–æ—à–∞—è —Ñ–æ—Ä–º–∞",
            "recommendation": "bet"
        }
    
    async def _mock_handball_total(self, betboom_data: Dict[str, Any], 
                                 scores24_data: Dict[str, Any]) -> Dict[str, Any]:
        await asyncio.sleep(0.3)
        predicted_total = betboom_data.get('predicted_total', 60)
        return {
            "confidence": 82,
            "pace": "–ë–´–°–¢–†–´–ô",
            "recommendation": f"–¢–ë_{predicted_total - 4}",
            "reasoning": "–í—ã—Å–æ–∫–∏–π —Ç–µ–º–ø, –∞—Ç–∞–∫—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã",
            "bet_type": "total"
        }
    
    def _get_error_response(self) -> Dict[str, Any]:
        """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
        return {
            "confidence": 0,
            "reasoning": "–û—à–∏–±–∫–∞ Claude API",
            "recommendation": "skip"
        }