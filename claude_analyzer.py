#!/usr/bin/env python3
"""
Claude Analyzer –¥–ª—è TrueLiveBet
–£–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–∞—Ç—á–µ–π —Å –ø–æ–º–æ—â—å—é Claude AI
"""

import json
import time
from datetime import datetime
from typing import Dict, Optional

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
from config import CLAUDE_CONFIG

class ClaudeAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –º–∞—Ç—á–µ–π —Å –ø–æ–º–æ—â—å—é Claude AI"""
    
    def __init__(self):
        self.api_key = CLAUDE_CONFIG['api_key']
        self.model = CLAUDE_CONFIG['model']
        self.max_tokens = CLAUDE_CONFIG['max_tokens']
        self.temperature = CLAUDE_CONFIG['temperature']
        self.enabled = CLAUDE_CONFIG['enabled']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
        if self.api_key == 'YOUR_CLAUDE_API_KEY_HERE':
            print("‚ö†Ô∏è Claude API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ê–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ Python —Å–∫—Ä–∏–ø—Ç.")
            self.enabled = False
        else:
            print("‚úÖ Claude API –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    def analyze_match(self, match_data: Dict) -> Optional[Dict]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–∞—Ç—á —Å –ø–æ–º–æ—â—å—é Claude"""
        if not self.enabled:
            return None
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è Claude
            prompt = self._create_analysis_prompt(match_data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Claude
            response = self._send_claude_request(prompt)
            
            if response:
                # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç Claude
                analysis = self._parse_claude_response(response, match_data)
                return analysis
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ Claude: {e}")
        
        return None
    
    def _create_analysis_prompt(self, match_data: Dict) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç—á–∞"""
        
        prompt = f"""
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Å—Ç–∞–≤–æ–∫ TrueLiveBet. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–∞—Ç—á –ø–æ –Ω–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ú–ê–¢–ß–ï:
- –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {match_data['sport']}
- –ö–æ–º–∞–Ω–¥–∞ 1: {match_data['team1']}
- –ö–æ–º–∞–Ω–¥–∞ 2: {match_data['team2']}
- –°—á–µ—Ç: {match_data['score']}
- –í—Ä–µ–º—è: {match_data['time'] or f"–ß–µ—Ç–≤–µ—Ä—Ç—å {match_data['quarter']}"}

–ö–†–ò–¢–ï–†–ò–ò TRUE LIVE BET:
1. –§—É—Ç–±–æ–ª: —Ñ–∞–≤–æ—Ä–∏—Ç –≤–µ–¥–µ—Ç 2+ –≥–æ–ª–∞, –≤—Ä–µ–º—è >60 –º–∏–Ω—É—Ç
2. –ë–∞—Å–∫–µ—Ç–±–æ–ª: –æ—Ç—Ä—ã–≤ 15+ –æ—á–∫–æ–≤, —á–µ—Ç–≤–µ—Ä—Ç—å 2+
3. –¢–µ–Ω–Ω–∏—Å: –≤—ã–∏–≥—Ä–∞–Ω 1-–π —Å–µ—Ç, –≤–µ–¥–µ—Ç –≤–æ 2-–º
4. –ì–∞–Ω–¥–±–æ–ª: –æ—Ç—Ä—ã–≤ 3+ –≥–æ–ª–∞, –≤—Ä–µ–º—è >45 –º–∏–Ω—É—Ç

–ó–ê–î–ê–ß–ê:
1. –û—Ü–µ–Ω–∏ –º–∞—Ç—á –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º TrueLiveBet (0-100%)
2. –î–∞–π —á–µ—Ç–∫—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é (—Å—Ç–∞–≤–∫–∞/–Ω–µ —Å—Ç–∞–≤–∫–∞)
3. –û–±–æ—Å–Ω—É–π —Ä–µ—à–µ–Ω–∏–µ
4. –£–∫–∞–∂–∏ —Ä–∏—Å–∫–∏
5. –ü—Ä–µ–¥–ª–æ–∂–∏ —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏ (1-2% –æ—Ç –±–∞–Ω–∫–∞)

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (JSON):
{{
    "confidence": 85,
    "recommendation": "–°–¢–ê–í–ö–ê",
    "reasoning": ["–ü—Ä–∏—á–∏–Ω–∞ 1", "–ü—Ä–∏—á–∏–Ω–∞ 2"],
    "risks": ["–†–∏—Å–∫ 1", "–†–∏—Å–∫ 2"],
    "bet_size": 1.5,
    "claude_analysis": "–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç Claude"
}}

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç—Ä–æ–≥–æ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º TrueLiveBet. –ù–µ –∏–∑–æ–±—Ä–µ—Ç–∞–π –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞.
"""
        
        return prompt
    
    def _send_claude_request(self, prompt: str) -> Optional[str]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Claude API"""
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π API –∑–∞–ø—Ä–æ—Å –∫ Claude
            # –ü–æ–∫–∞ —á—Ç–æ —Å–∏–º—É–ª–∏—Ä—É–µ–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            
            if not self.api_key or self.api_key == 'YOUR_CLAUDE_API_KEY_HERE':
                return None
            
            # TODO: –†–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Claude API
            # import anthropic
            # client = anthropic.Anthropic(api_key=self.api_key)
            # response = client.messages.create(...)
            
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
            return self._simulate_claude_response(prompt)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ Claude: {e}")
            return None
    
    def _simulate_claude_response(self, prompt: str) -> str:
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç Claude –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if '—Ñ—É—Ç–±–æ–ª' in prompt.lower() and '2:0' in prompt:
            return '''
{
    "confidence": 85,
    "recommendation": "–°–¢–ê–í–ö–ê",
    "reasoning": [
        "–§–∞–≤–æ—Ä–∏—Ç –≤–µ–¥–µ—Ç –Ω–∞ 2 –≥–æ–ª–∞",
        "–í—Ä–µ–º—è –º–∞—Ç—á–∞ 65 –º–∏–Ω—É—Ç - –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏",
        "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º TrueLiveBet"
    ],
    "risks": [
        "–í–æ–∑–º–æ–∂–Ω–∞—è –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞ –≤ –∫–æ–Ω—Ü–æ–≤–∫–µ",
        "–£—Å—Ç–∞–ª–æ—Å—Ç—å –∏–≥—Ä–æ–∫–æ–≤"
    ],
    "bet_size": 1.5,
    "claude_analysis": "–ú–∞—Ç—á –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º TrueLiveBet. –§–∞–≤–æ—Ä–∏—Ç –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –∏–≥—Ä—É, –≤–µ–¥–µ—Ç –Ω–∞ 2 –≥–æ–ª–∞, –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏. –†–∏—Å–∫–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ."
}
'''
        elif '–±–∞—Å–∫–µ—Ç–±–æ–ª' in prompt.lower() and '85:65' in prompt:
            return '''
{
    "confidence": 80,
    "recommendation": "–°–¢–ê–í–ö–ê",
    "reasoning": [
        "–û—Ç—Ä—ã–≤ 20 –æ—á–∫–æ–≤ - –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ 15",
        "3-—è —á–µ—Ç–≤–µ—Ä—Ç—å - –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏"
    ],
    "risks": [
        "–í–æ–∑–º–æ–∂–Ω—ã–π —Ä—ã–≤–æ–∫ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞",
        "–§–∞—É–ª—ã –∏ —à—Ç—Ä–∞—Ñ–Ω—ã–µ –±—Ä–æ—Å–∫–∏"
    ],
    "bet_size": 1.2,
    "claude_analysis": "–ë–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω—ã–π –º–∞—Ç—á —Å –±–æ–ª—å—à–∏–º –æ—Ç—Ä—ã–≤–æ–º –≤ 3-–π —á–µ—Ç–≤–µ—Ä—Ç–∏. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º TrueLiveBet. –†–µ–∫–æ–º–µ–Ω–¥—É—é —Å—Ç–∞–≤–∫—É."
}
'''
        else:
            return '''
{
    "confidence": 45,
    "recommendation": "–ù–ï –°–¢–ê–í–ö–ê",
    "reasoning": [
        "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
        "–ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º TrueLiveBet"
    ],
    "risks": ["–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –ø—Ä–æ–∏–≥—Ä—ã—à–∞"],
    "bet_size": 0,
    "claude_analysis": "–ú–∞—Ç—á –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º TrueLiveBet. –†–µ–∫–æ–º–µ–Ω–¥—É—é –≤–æ–∑–¥–µ—Ä–∂–∞—Ç—å—Å—è –æ—Ç —Å—Ç–∞–≤–∫–∏."
}
'''
    
    def _parse_claude_response(self, response: str, match_data: Dict) -> Dict:
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç Claude"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            json_start = response.find('{')
            json_end = response.rfind('}') + 1
            
            if json_start != -1 and json_end != -1:
                json_str = response[json_start:json_end]
                analysis = json.loads(json_str)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ
                analysis['match_data'] = match_data
                analysis['claude_timestamp'] = datetime.now().isoformat()
                
                return analysis
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ Claude")
                return None
                
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç Claude: {e}")
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ Claude: {e}")
            return None
    
    def get_enhanced_recommendation(self, match_data: Dict, python_analysis: Dict) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –æ—Ç Claude"""
        
        # –ï—Å–ª–∏ Claude –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º Python –∞–Ω–∞–ª–∏–∑
        if not self.enabled:
            return python_analysis
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ—Ç Claude
        claude_analysis = self.analyze_match(match_data)
        
        if claude_analysis:
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º Python –∏ Claude –∞–Ω–∞–ª–∏–∑
            enhanced_analysis = {
                **python_analysis,
                'claude_enhanced': True,
                'claude_confidence': claude_analysis.get('confidence', 0),
                'claude_recommendation': claude_analysis.get('recommendation', ''),
                'claude_reasoning': claude_analysis.get('reasoning', []),
                'claude_risks': claude_analysis.get('risks', []),
                'claude_bet_size': claude_analysis.get('bet_size', 0),
                'claude_analysis_text': claude_analysis.get('claude_analysis', ''),
                'final_confidence': max(
                    python_analysis.get('confidence', 0),
                    claude_analysis.get('confidence', 0)
                )
            }
            
            return enhanced_analysis
        
        # –ï—Å–ª–∏ Claude –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º Python –∞–Ω–∞–ª–∏–∑
        return python_analysis

def test_claude_analyzer():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Claude –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä"""
    print("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Claude Analyzer...")
    
    analyzer = ClaudeAnalyzer()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_match = {
        'sport': 'football',
        'team1': '–ë–∞—Ä—Å–µ–ª–æ–Ω–∞',
        'team2': '–†–µ–∞–ª –ú–∞–¥—Ä–∏–¥',
        'score': '2:0',
        'time': '65\'',
        'quarter': None
    }
    
    # –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Claude
    result = analyzer.analyze_match(test_match)
    
    if result:
        print("‚úÖ Claude –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω:")
        print(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.get('confidence')}%")
        print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {result.get('recommendation')}")
        print(f"üîç –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {result.get('reasoning')}")
    else:
        print("‚ùå Claude –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

if __name__ == "__main__":
    test_claude_analyzer()