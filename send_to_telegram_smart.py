#!/usr/bin/env python3
"""
TrueLiveBet - –£–º–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –≤ Telegram
–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞
"""

import json
import os
import time
from datetime import datetime
import urllib.request
import urllib.parse

class SmartTelegramSender:
    """–£–º–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –≤ Telegram - —Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ"""
    
    def __init__(self, token: str, chat_id: str = "@truelivebet"):
        self.token = token
        self.chat_id = chat_id
        self.api_url = f"https://api.telegram.org/bot{token}"
        self.last_sent_files = set()  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        
    def send_message(self, text: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        try:
            data = {
                'chat_id': self.chat_id,
                'text': text,
                'parse_mode': 'Markdown'
            }
            
            encoded_data = urllib.parse.urlencode(data).encode('utf-8')
            req = urllib.request.Request(
                f"{self.api_url}/sendMessage",
                data=encoded_data,
                headers={'Content-Type': 'application/x-www-form-urlencoded'}
            )
            
            with urllib.request.urlopen(req, timeout=10) as response:
                result = json.loads(response.read().decode('utf-8'))
                
                if result.get('ok'):
                    print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! ID: {result['result']['message_id']}")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            return False
    
    def get_fresh_analysis_file(self):
        """–ù–∞—Ö–æ–¥–∏—Ç —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π —Ñ–∞–π–ª –∞–Ω–∞–ª–∏–∑–∞"""
        recommendations_dir = "recommendations"
        
        if not os.path.exists(recommendations_dir):
            return None
        
        # –ò—â–µ–º —Ñ–∞–π–ª—ã –∞–Ω–∞–ª–∏–∑–∞
        analysis_files = []
        for filename in os.listdir(recommendations_dir):
            if filename.startswith('live_analysis_') and filename.endswith('.json') and not filename.endswith('_text.json'):
                file_path = os.path.join(recommendations_dir, filename)
                # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                mtime = os.path.getmtime(file_path)
                analysis_files.append((file_path, mtime, filename))
        
        if not analysis_files:
            return None
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è (—Å–∞–º—ã–π —Å–≤–µ–∂–∏–π –ø–µ—Ä–≤—ã–π)
        analysis_files.sort(key=lambda x: x[1], reverse=True)
        
        return analysis_files[0][0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫ —Å–∞–º–æ–º—É —Å–≤–µ–∂–µ–º—É —Ñ–∞–π–ª—É
    
    def format_analysis_message(self, data):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞"""
        total_matches = data.get('total_matches', 0)
        sports = data.get('sports_analyzed', [])
        best_bets = data.get('best_bets', [])
        
        message_text = f"""
üìä **TrueLiveBet - –ù–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è**

‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')} (–ú–°–ö)
üìà –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π: {total_matches}
‚öΩ –í–∏–¥—ã —Å–ø–æ—Ä—Ç–∞: {', '.join(sports)}

üèÜ **–õ—É—á—à–∏–µ —Å—Ç–∞–≤–∫–∏:**
"""
        
        for i, bet in enumerate(best_bets, 1):
            description = bet.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
            confidence = bet.get('confidence', 0)
            category = bet.get('category', 'üëç')
            message_text += f"{i}. {category} {description} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}%)\n"
        

        
        return message_text
    
    def send_fresh_analysis(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–π –∞–Ω–∞–ª–∏–∑"""
        print("üîç –ò—â–µ–º —Å–≤–µ–∂–∏–π —Ñ–∞–π–ª –∞–Ω–∞–ª–∏–∑–∞...")
        
        fresh_file = self.get_fresh_analysis_file()
        if not fresh_file:
            print("‚ùå –§–∞–π–ª—ã –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        
        print(f"üìÅ –ù–∞–π–¥–µ–Ω —Å–≤–µ–∂–∏–π —Ñ–∞–π–ª: {os.path.basename(fresh_file)}")
        
        try:
            with open(fresh_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = self.format_analysis_message(data)
            
            print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–≤–µ–∂–∏–π –∞–Ω–∞–ª–∏–∑ –≤ Telegram...")
            print("=" * 60)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            success = self.send_message(message_text)
            
            if success:
                print("‚úÖ –°–≤–µ–∂–∏–π –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram!")
                # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                self.last_sent_files.add(os.path.basename(fresh_file))
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∞–ª–∏–∑–∞")
            
            return success
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {fresh_file}: {e}")
            return False
    
    def send_single_recommendation(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–Ω—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å)"""
        recommendations_dir = "recommendations"
        
        if not os.path.exists(recommendations_dir):
            return False
        
        # –ò—â–µ–º —Ñ–∞–π–ª —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        for filename in os.listdir(recommendations_dir):
            if filename.startswith('recommendation_') and filename.endswith('.json'):
                file_path = os.path.join(recommendations_dir, filename)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã –µ–≥–æ —É–∂–µ
                if filename in self.last_sent_files:
                    continue
                
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        data = json.load(f)
                    
                    message_text = data.get('text', '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')
                    message_text += "\n\nüöÄ **TrueLiveBet —Å–∏—Å—Ç–µ–º–∞ –≤—Å–µ–≥–¥–∞ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ!** ‚öΩüì±"
                    
                    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é: {filename}")
                    
                    success = self.send_message(message_text)
                    
                    if success:
                        print("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
                        self.last_sent_files.add(filename)
                        return True
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ {filename}: {e}")
        
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    token = "7824400107:AAGZqPdS0E0N3HsYpD8TW9m8c-bapFd-RHk"
    
    print("üöÄ TrueLiveBet - –£–ú–ù–´–ô –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –≤ Telegram")
    print("=" * 60)
    print(f"üîë –¢–æ–∫–µ–Ω: {token[:10]}...{token[-10:]}")
    print(f"üí¨ –ß–∞—Ç: @truelivebet")
    print("üìä –û—Ç–ø—Ä–∞–≤–∫–∞: –¢–û–õ–¨–ö–û —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —É–º–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
    sender = SmartTelegramSender(token)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–π –∞–Ω–∞–ª–∏–∑
    success = sender.send_fresh_analysis()
    
    if success:
        print("\nüéâ –°–≤–µ–∂–∏–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram!")
        print("üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–Ω–∞–ª @truelivebet")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∞–ª–∏–∑–∞")
        print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –∞–Ω–∞–ª–∏–∑–∞")

if __name__ == "__main__":
    main()
