#!/usr/bin/env python3
"""
TrueLiveBet - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –±–æ—Ç–∞
–ê–≤—Ç–æ—Ä: –í–∏–∫—Ç–æ—Ä
"""

import asyncio
from loguru import logger
from telegram_bot import TrueLiveBetBot
from config import TELEGRAM_BOT_TOKEN

async def test_bot():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞"""
    try:
        print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TrueLiveBet Telegram –±–æ—Ç–∞...")
        print(f"üì± –¢–æ–∫–µ–Ω: {TELEGRAM_BOT_TOKEN[:10]}...{TELEGRAM_BOT_TOKEN[-10:]}")
        
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
        bot = TrueLiveBetBot(TELEGRAM_BOT_TOKEN)
        print("‚úÖ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
        await bot.application.initialize()
        print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = await bot.application.bot.get_me()
        print(f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:")
        print(f"   –ò–º—è: {bot_info.first_name}")
        print(f"   Username: @{bot_info.username}")
        print(f"   ID: {bot_info.id}")
        
        print("\nüéØ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("üí° –û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /start –±–æ—Ç—É @TrueLiveBetBot")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
        await bot.application.stop()
        await bot.application.shutdown()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def test_commands():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    try:
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞...")
        
        bot = TrueLiveBetBot(TELEGRAM_BOT_TOKEN)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        commands = [
            ("start", "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"),
            ("help", "–°–ø—Ä–∞–≤–∫–∞"),
            ("about", "–û –ø—Ä–æ–µ–∫—Ç–µ"),
            ("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            ("analyze", "–ê–Ω–∞–ª–∏–∑"),
            ("live", "Live –º–∞—Ç—á–∏")
        ]
        
        for command, description in commands:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞
                handlers = bot.application.handlers.get(0, [])
                command_found = any(
                    hasattr(handler, 'command') and handler.command == command
                    for handler in handlers
                )
                
                status = "‚úÖ" if command_found else "‚ùå"
                print(f"   {status} /{command} - {description}")
                
            except Exception as e:
                print(f"   ‚ùå /{command} - –û—à–∏–±–∫–∞: {e}")
        
        print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ TrueLiveBet - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞
    await test_bot()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    await test_commands()
    
    print("\n" + "=" * 50)
    print("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüì± –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –û—Ç–∫—Ä–æ–π @TrueLiveBetBot –≤ Telegram")
    print("2. –û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /start")
    print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã")
    print("4. –ï—Å–ª–∏ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –∑–∞–ø—É—Å–∫–∞–π –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É!")

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.add("logs/test_bot.log", rotation="1 day", retention="7 days")
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
