#!/usr/bin/env python3
"""
TrueLiveBet - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –≤ GitHub
–ê–≤—Ç–æ—Ä: –í–∏–∫—Ç–æ—Ä
"""

import os
import subprocess
import json
from datetime import datetime
from pathlib import Path
from loguru import logger

class GitAnalysisPusher:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –≤ GitHub"""
    
    def __init__(self, repo_path: str = None):
        self.repo_path = repo_path or os.getcwd()
        self.analysis_dir = Path(self.repo_path) / "analysis"
        self.git_dir = Path(self.repo_path) / ".git"
        
    def check_git_repo(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"""
        if not self.git_dir.exists():
            logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω .git –∫–∞—Ç–∞–ª–æ–≥. –≠—Ç–æ –Ω–µ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π.")
            return False
        return True
    
    def check_git_status(self) -> dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            result = subprocess.run(
                ["git", "status", "--porcelain"],
                cwd=self.repo_path,
                capture_output=True,
                text=True,
                check=True
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É
            branch_result = subprocess.run(
                ["git", "branch", "--show-current"],
                cwd=self.repo_path,
                capture_output=True,
                text=True,
                check=True
            )
            
            current_branch = branch_result.stdout.strip()
            
            return {
                "has_changes": bool(result.stdout.strip()),
                "changes": result.stdout.strip().split('\n') if result.stdout.strip() else [],
                "current_branch": current_branch,
                "status": "clean" if not result.stdout.strip() else "dirty"
            }
            
        except subprocess.CalledProcessError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ git —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {"error": str(e)}
    
    def add_files(self, files: list) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ git"""
        try:
            for file_path in files:
                full_path = Path(self.repo_path) / file_path
                if full_path.exists():
                    subprocess.run(
                        ["git", "add", str(file_path)],
                        cwd=self.repo_path,
                        check=True
                    )
                    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: {file_path}")
                else:
                    logger.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            
            return True
            
        except subprocess.CalledProcessError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {e}")
            return False
    
    def commit_changes(self, message: str) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞"""
        try:
            subprocess.run(
                ["git", "commit", "-m", message],
                cwd=self.repo_path,
                check=True
            )
            logger.info(f"–°–æ–∑–¥–∞–Ω –∫–æ–º–º–∏—Ç: {message}")
            return True
            
        except subprocess.CalledProcessError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–∏—Ç–∞: {e}")
            return False
    
    def push_to_remote(self, remote: str = "origin", branch: str = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"""
        try:
            if not branch:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É
                result = subprocess.run(
                    ["git", "branch", "--show-current"],
                    cwd=self.repo_path,
                    capture_output=True,
                    text=True,
                    check=True
                )
                branch = result.stdout.strip()
            
            subprocess.run(
                ["git", "push", remote, branch],
                cwd=self.repo_path,
                check=True
            )
            
            logger.info(f"–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ {remote}/{branch}")
            return True
            
        except subprocess.CalledProcessError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {e}")
            return False
    
    def push_analysis_results(self, analysis_files: list = None) -> bool:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        
        if not self.check_git_repo():
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        status = self.check_git_status()
        if "error" in status:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {status['error']}")
            return False
        
        if status["status"] == "clean":
            logger.info("–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞")
            return True
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        if not analysis_files:
            analysis_files = [
                "analysis/live_analysis_results.md",
                "analysis/live_analysis_data.json"
            ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
        if not self.add_files(analysis_files):
            return False
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        commit_message = f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –ª–∞–π–≤ –º–∞—Ç—á–µ–π BetBoom - {timestamp}"
        
        if not self.commit_changes(commit_message):
            return False
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        if not self.push_to_remote():
            return False
        
        logger.success("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ GitHub")
        return True
    
    def create_webhook_trigger(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞-—Ç—Ä–∏–≥–≥–µ—Ä–∞ –¥–ª—è webhook"""
        try:
            trigger_file = self.analysis_dir / "webhook_trigger.json"
            
            trigger_data = {
                "trigger_id": f"webhook_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
                "timestamp": datetime.now().isoformat(),
                "action": "telegram_notification",
                "status": "pending",
                "files": [
                    "live_analysis_results.md",
                    "live_analysis_data.json"
                ]
            }
            
            with open(trigger_file, 'w', encoding='utf-8') as f:
                json.dump(trigger_data, f, ensure_ascii=False, indent=2)
            
            logger.info("–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª-—Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è webhook")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è webhook —Ç—Ä–∏–≥–≥–µ—Ä–∞: {e}")
            return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.add("logs/git_push_analysis.log", rotation="1 day", retention="7 days")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞
    pusher = GitAnalysisPusher()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    success = pusher.push_analysis_results()
    
    if success:
        # –°–æ–∑–¥–∞–µ–º webhook —Ç—Ä–∏–≥–≥–µ—Ä
        pusher.create_webhook_trigger()
        logger.success("üéØ –ê–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç!")
    else:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞")

if __name__ == "__main__":
    main()
