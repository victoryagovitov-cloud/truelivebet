#!/usr/bin/env python3
"""
TrueLiveBet - –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –≤ Telegram –∫–∞–Ω–∞–ª
–ê–≤—Ç–æ—Ä: –í–∏–∫—Ç–æ—Ä
"""

import asyncio
from datetime import datetime
from typing import List, Dict
from loguru import logger
from ai_analyzer import AnalysisResult

class ChannelPublisher:
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –≤ Telegram –∫–∞–Ω–∞–ª"""
    
    def __init__(self, bot, channel_id: str):
        self.bot = bot
        self.channel_id = channel_id
        self.published_count = 0
        
    async def publish_analysis(self, analysis: AnalysisResult) -> bool:
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –≤ –∫–∞–Ω–∞–ª"""
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞
            message = self._format_channel_message(analysis)
            
            # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
            await self.bot.application.bot.send_message(
                chat_id=self.channel_id,
                text=message,
                parse_mode='Markdown'
            )
            
            self.published_count += 1
            logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª {self.channel_id}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
            return False
    
    async def publish_batch(self, analyses: List[AnalysisResult]) -> Dict[str, int]:
        """–ü–∞–∫–µ—Ç–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤"""
        results = {
            'success': 0,
            'failed': 0,
            'total': len(analyses)
        }
        
        for analysis in analyses:
            try:
                success = await self.publish_analysis(analysis)
                if success:
                    results['success'] += 1
                else:
                    results['failed'] += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏
                await asyncio.sleep(3)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}")
                results['failed'] += 1
                continue
        
        logger.info(f"üìä –ü–∞–∫–µ—Ç–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {results}")
        return results
    
    def _format_channel_message(self, analysis: AnalysisResult) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
        category_emoji = analysis.category
        category_name = {
            "üíÄ": "–ú–ï–†–¢–í–´–ï (>95%)",
            "üéØ": "–ò–î–ï–ê–õ–¨–ù–´–ï (85-95%)", 
            "‚≠ê": "–û–¢–õ–ò–ß–ù–´–ï (80-85%)",
            "üëç": "–•–û–†–û–®–ò–ï (75-80%)"
        }.get(analysis.category, "–ê–ù–ê–õ–ò–ó")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        try:
            timestamp = datetime.fromisoformat(analysis.timestamp)
            time_str = timestamp.strftime("%H:%M")
        except:
            time_str = "—Å–µ–π—á–∞—Å"
        
        message = f"""
{category_emoji} **{category_name}** | {time_str}

üéØ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** {analysis.recommendation}
üìä **–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {analysis.confidence:.1f}%
‚ö†Ô∏è **–†–∏—Å–∫:** {analysis.risk_level}

üí° **–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:**
{analysis.reasoning}

üèÜ **TrueLiveBet - —á–µ—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑!**
        """
        
        return message.strip()
    
    async def publish_summary(self, analyses: List[AnalysisResult]) -> bool:
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ –ø–æ –≤—Å–µ–º –∞–Ω–∞–ª–∏–∑–∞–º"""
        try:
            if not analyses:
                return False
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            categories = {}
            for analysis in analyses:
                cat = analysis.category
                if cat not in categories:
                    categories[cat] = []
                categories[cat].append(analysis)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
            summary = f"""
üìä **–°–í–û–î–ö–ê –ê–ù–ê–õ–ò–ó–û–í | {datetime.now().strftime('%H:%M')}**

üéØ **–í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:** {len(analyses)} –º–∞—Ç—á–µ–π
"""
            
            for cat, cat_analyses in categories.items():
                cat_name = {
                    "üíÄ": "–ú–ï–†–¢–í–´–ï",
                    "üéØ": "–ò–î–ï–ê–õ–¨–ù–´–ï", 
                    "‚≠ê": "–û–¢–õ–ò–ß–ù–´–ï",
                    "üëç": "–•–û–†–û–®–ò–ï"
                }.get(cat, "–î–†–£–ì–ò–ï")
                
                summary += f"\n{cat} **{cat_name}:** {len(cat_analyses)}"
            
            summary += f"""

üìà **–£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ:** {self.published_count}
‚è∞ **–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M')}

üèÜ **TrueLiveBet - —á–µ—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑!**
            """
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–≤–æ–¥–∫—É
            await self.bot.application.bot.send_message(
                chat_id=self.channel_id,
                text=summary.strip(),
                parse_mode='Markdown'
            )
            
            logger.info(f"‚úÖ –°–≤–æ–¥–∫–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª {self.channel_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏: {e}")
            return False
    
    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
        return {
            'channel_id': self.channel_id,
            'published_count': self.published_count,
            'last_published': datetime.now().isoformat()
        }

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def test_publisher():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–¥–∞—Ç–µ–ª—è"""
    from config import TELEGRAM_CHANNEL_ID
    
    print(f"üì¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–¥–∞—Ç–µ–ª—è –∫–∞–Ω–∞–ª–∞: {TELEGRAM_CHANNEL_ID}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
    test_analysis = AnalysisResult(
        match_id="test_match",
        confidence=85.5,
        recommendation="–°—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–æ–±–µ–¥—É –∫–æ–º–∞–Ω–¥—ã 1",
        reasoning="–ö–æ–º–∞–Ω–¥–∞ 1 –≤–µ–¥–µ—Ç 2:0, –∫–æ–Ω—Ç—Ä–æ–ª—å –º—è—á–∞ 65%, —É–¥–∞—Ä—ã 8:2",
        risk_level="—Å—Ä–µ–¥–Ω–∏–π",
        category="üéØ",
        timestamp=datetime.now().isoformat()
    )
    
    print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–∑–¥–∞–Ω: {test_analysis.category} - {test_analysis.confidence:.1f}%")
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    publisher = ChannelPublisher(None, TELEGRAM_CHANNEL_ID)
    message = publisher._format_channel_message(test_analysis)
    
    print("\nüìù –ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞:")
    print("=" * 50)
    print(message)
    print("=" * 50)

if __name__ == "__main__":
    asyncio.run(test_publisher())
