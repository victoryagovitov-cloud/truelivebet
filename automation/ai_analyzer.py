#!/usr/bin/env python3
"""
TrueLiveBet - AI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –º–∞—Ç—á–µ–π
–ê–≤—Ç–æ—Ä: –í–∏–∫—Ç–æ—Ä
"""

import asyncio
import json
from typing import List, Dict, Optional
from dataclasses import dataclass, asdict
from openai import AsyncOpenAI
from anthropic import AsyncAnthropic
from loguru import logger
from datetime import datetime

@dataclass
class AnalysisResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç AI –∞–Ω–∞–ª–∏–∑–∞"""
    match_id: str
    confidence: float  # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    recommendation: str  # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
    reasoning: str  # –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
    risk_level: str  # –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
    category: str  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è (üíÄüéØ‚≠êüëç)
    timestamp: str

class AIAnalyzer:
    """AI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –º–∞—Ç—á–µ–π"""
    
    def __init__(self, openai_api_key: str = None, anthropic_api_key: str = None):
        self.openai_client = AsyncOpenAI(api_key=openai_api_key) if openai_api_key else None
        self.anthropic_client = AsyncAnthropic(api_key=anthropic_api_key) if anthropic_api_key else None
        
        # –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ TrueLiveBet
        self.analysis_system = """
        –¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –ª–∞–π–≤-—Å—Ç–∞–≤–æ–∫ TrueLiveBet. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–∞—Ç—á–∏ –ø–æ –Ω–∞—à–∏–º –ø—Ä–∞–≤–∏–ª–∞–º:

        üèÜ –°–¢–†–û–ì–ò–ô –ê–ù–ê–õ–ò–ó (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):
        - –ù–ò–ö–û–ì–î–ê –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –º–∞—Ç—á –ë–ï–ó –ø–æ–∏—Å–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!
        - –ê–ª–≥–æ—Ä–∏—Ç–º: –°—á–µ—Ç ‚Üí –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ‚Üí –ß–µ–∫-–ª–∏—Å—Ç ‚Üí –°–ø—Ä–∞–≤–∫–∞ ‚Üí –ö–∞—Ç–µ–≥–æ—Ä–∏—è

        üéØ –ö–ê–¢–ï–ì–û–†–ò–ò:
        - üíÄ >95% - –ú–µ—Ä—Ç–≤—ã–µ (—Ç—Ä–µ–±—É—é—Ç —Å—Ç—Ä–æ–≥–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞)
        - üéØ 85‚Äì95% - –ò–¥–µ–∞–ª—å–Ω—ã–µ
        - ‚≠ê 80‚Äì85% - –û—Ç–ª–∏—á–Ω—ã–µ  
        - üëç 75‚Äì80% - –•–æ—Ä–æ—à–∏–µ

        ‚öΩ –§–£–¢–ë–û–õ:
        - –û–¢–ö–†–´–¢ –Ω–µ–Ω–∏—á–µ–π–Ω—ã–π —Å—á–µ—Ç?
        - –§–∞–≤–æ—Ä–∏—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ –≤–µ–¥–µ—Ç?
        - –°–ø—Ä–∞–≤–∫–∞ –æ–± –û–ë–ï–ò–• –∫–æ–º–∞–Ω–¥–∞—Ö?

        üéæ –¢–ï–ù–ù–ò–°:
        - –í—ã–∏–≥—Ä–∞–ª 1-–π —Å–µ—Ç?
        - –í–ï–î–ï–¢ –≤–æ 2-–º?
        - –§–∞–≤–æ—Ä–∏—Ç –ø–æ ATP/WTA?
        - >80%?

        üèÄ –ë–ê–°–ö–ï–¢–ë–û–õ:
        - –°–£–©–ï–°–¢–í–ï–ù–ù–û–ï –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ (15+ –æ—á–∫–æ–≤) –≤ –õ–Æ–ë–û–ô —á–µ—Ç–≤–µ—Ä—Ç–∏?
        - –§–∞–≤–æ—Ä–∏—Ç –ø–æ —É—Ä–æ–≤–Ω—é?

        ü§æ –ì–ê–ù–î–ë–û–õ:
        - –ù–µ–Ω–∏—á–µ–π–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç?
        - –ê–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω—è –û–ë–ï–ò–• –∫–æ–º–∞–Ω–¥?
        - –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ vs —Å—Ä–µ–¥–Ω—è—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç—å?

        –í–ê–ñ–ù–û: –í—Å–µ–≥–¥–∞ –¥–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º!
        """
    
    async def analyze_match(self, match_data: Dict, additional_stats: Dict = None) -> AnalysisResult:
        """–ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞ —Å –ø–æ–º–æ—â—å—é AI"""
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            prompt = self._create_analysis_prompt(match_data, additional_stats)
            
            # –í—ã–±–∏—Ä–∞–µ–º AI –º–æ–¥–µ–ª—å
            if self.anthropic_client:
                result = await self._analyze_with_anthropic(prompt)
            elif self.openai_client:
                result = await self._analyze_with_openai(prompt)
            else:
                # Fallback –∞–Ω–∞–ª–∏–∑ –±–µ–∑ AI
                result = await self._fallback_analysis(match_data, additional_stats)
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return await self._fallback_analysis(match_data, additional_stats)
    
    def _create_analysis_prompt(self, match_data: Dict, additional_stats: Dict = None) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞"""
        
        prompt = f"""
        {self.analysis_system}

        –ê–ù–ê–õ–ò–ó –ú–ê–¢–ß–ê:
        –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {match_data.get('sport', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
        –õ–∏–≥–∞: {match_data.get('league', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
        –ö–æ–º–∞–Ω–¥–∞ 1: {match_data.get('team1', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
        –ö–æ–º–∞–Ω–¥–∞ 2: {match_data.get('team2', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
        –°—á–µ—Ç: {match_data.get('score', '0:0')}
        –í—Ä–µ–º—è: {match_data.get('time', '0\'')}
        –°—Ç–∞—Ç—É—Å: {match_data.get('status', 'live')}
        –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: {json.dumps(match_data.get('odds', {}), ensure_ascii=False)}
        """
        
        if additional_stats:
            prompt += f"\n\n–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n{json.dumps(additional_stats, ensure_ascii=False, indent=2)}"
        
        prompt += """

        –ó–ê–î–ê–ß–ê: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –º–∞—Ç—á –ø–æ –Ω–∞—à–∏–º –ø—Ä–∞–≤–∏–ª–∞–º –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é.

        –û–¢–í–ï–¢ –í –§–û–†–ú–ê–¢–ï JSON:
        {
            "confidence": 85.5,
            "recommendation": "–°—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–æ–±–µ–¥—É –∫–æ–º–∞–Ω–¥—ã 1",
            "reasoning": "–ö–æ–º–∞–Ω–¥–∞ 1 –≤–µ–¥–µ—Ç 2:0, –∫–æ–Ω—Ç—Ä–æ–ª—å –º—è—á–∞ 65%, —É–¥–∞—Ä—ã 8:2",
            "risk_level": "—Å—Ä–µ–¥–Ω–∏–π",
            "category": "üéØ"
        }
        """
        
        return prompt
    
    async def _analyze_with_anthropic(self, prompt: str) -> AnalysisResult:
        """–ê–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é Anthropic Claude"""
        try:
            response = await self.anthropic_client.messages.create(
                model="claude-3-sonnet-20240229",
                max_tokens=1000,
                temperature=0.1,
                messages=[{"role": "user", "content": prompt}]
            )
            
            content = response.content[0].text
            return self._parse_ai_response(content)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Anthropic API: {e}")
            raise
    
    async def _analyze_with_openai(self, prompt: str) -> AnalysisResult:
        """–ê–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é OpenAI GPT"""
        try:
            response = await self.openai_client.chat.completions.create(
                model="gpt-4",
                messages=[{"role": "system", "content": self.analysis_system},
                         {"role": "user", "content": prompt}],
                max_tokens=1000,
                temperature=0.1
            )
            
            content = response.choices[0].message.content
            return self._parse_ai_response(content)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ OpenAI API: {e}")
            raise
    
    def _parse_ai_response(self, content: str) -> AnalysisResult:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ AI"""
        try:
            # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
            start_idx = content.find('{')
            end_idx = content.rfind('}') + 1
            
            if start_idx != -1 and end_idx != -1:
                json_str = content[start_idx:end_idx]
                data = json.loads(json_str)
                
                return AnalysisResult(
                    match_id=f"{data.get('team1', '')}_{data.get('team2', '')}",
                    confidence=float(data.get('confidence', 75.0)),
                    recommendation=data.get('recommendation', '–ê–Ω–∞–ª–∏–∑ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω'),
                    reasoning=data.get('reasoning', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö'),
                    risk_level=data.get('risk_level', '–≤—ã—Å–æ–∫–∏–π'),
                    category=data.get('category', 'üëç'),
                    timestamp=datetime.now().isoformat()
                )
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ AI –æ—Ç–≤–µ—Ç–∞: {e}")
        
        # Fallback –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è
        return AnalysisResult(
            match_id="unknown",
            confidence=50.0,
            recommendation="–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
            reasoning="AI –∞–Ω–∞–ª–∏–∑ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω",
            risk_level="–≤—ã—Å–æ–∫–∏–π",
            category="üëç",
            timestamp=datetime.now().isoformat()
        )
    
    async def _fallback_analysis(self, match_data: Dict, additional_stats: Dict = None) -> AnalysisResult:
        """Fallback –∞–Ω–∞–ª–∏–∑ –±–µ–∑ AI"""
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        confidence = 50.0
        category = "üëç"
        risk_level = "–≤—ã—Å–æ–∫–∏–π"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç
        score = match_data.get('score', '0:0')
        if ':' in score:
            home_score, away_score = map(int, score.split(':'))
            if home_score > away_score:
                confidence = 70.0
                category = "‚≠ê"
                risk_level = "—Å—Ä–µ–¥–Ω–∏–π"
            elif away_score > home_score:
                confidence = 70.0
                category = "‚≠ê"
                risk_level = "—Å—Ä–µ–¥–Ω–∏–π"
        
        return AnalysisResult(
            match_id=f"{match_data.get('team1', '')}_{match_data.get('team2', '')}",
            confidence=confidence,
            recommendation="–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reasoning="Fallback –∞–Ω–∞–ª–∏–∑ - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏",
            risk_level=risk_level,
            category=category,
            timestamp=datetime.now().isoformat()
        )
    
    async def batch_analyze(self, matches: List[Dict], additional_stats: Dict = None) -> List[AnalysisResult]:
        """–ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∞—Ç—á–µ–π"""
        results = []
        
        for match in matches:
            try:
                result = await self.analyze_match(match, additional_stats)
                results.append(result)
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(1)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç—á–∞ {match.get('team1', '')} vs {match.get('team2', '')}: {e}")
                continue
        
        return results

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def test_analyzer():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    analyzer = AIAnalyzer()
    
    test_match = {
        'sport': '–§—É—Ç–±–æ–ª',
        'league': '–ü—Ä–µ–º—å–µ—Ä-–ª–∏–≥–∞',
        'team1': '–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –Æ–Ω–∞–π—Ç–µ–¥',
        'team2': '–õ–∏–≤–µ—Ä–ø—É–ª—å',
        'score': '2:0',
        'time': '75\'',
        'odds': {'1': 1.5, 'X': 4.2, '2': 6.8},
        'status': 'live'
    }
    
    result = await analyzer.analyze_match(test_match)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: {result}")

if __name__ == "__main__":
    asyncio.run(test_analyzer())
